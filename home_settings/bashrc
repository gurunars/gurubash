# Exiter
########

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# Various settings
##################

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# Make bash autocomplete with up arrow from bash history
bind '"\e[A":history-search-backward'
bind '"\e[B":history-search-forward'

# Color definitions
###################

# Reset
Color_Off='\e[0m'       # Text Reset

# Regular Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Underline
UBlack='\e[4;30m'       # Black
URed='\e[4;31m'         # Red
UGreen='\e[4;32m'       # Green
UYellow='\e[4;33m'      # Yellow
UBlue='\e[4;34m'        # Blue
UPurple='\e[4;35m'      # Purple
UCyan='\e[4;36m'        # Cyan
UWhite='\e[4;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

# High Intensty
IBlack='\e[0;90m'       # Black
IRed='\e[0;91m'         # Red
IGreen='\e[0;92m'       # Green
IYellow='\e[0;93m'      # Yellow
IBlue='\e[0;94m'        # Blue
IPurple='\e[0;95m'      # Purple
ICyan='\e[0;96m'        # Cyan
IWhite='\e[0;97m'       # White

# Bold High Intensty
BIBlack='\e[1;90m'      # Black
BIRed='\e[1;91m'        # Red
BIGreen='\e[1;92m'      # Green
BIYellow='\e[1;93m'     # Yellow
BIBlue='\e[1;94m'       # Blue
BIPurple='\e[1;95m'     # Purple
BICyan='\e[1;96m'       # Cyan
BIWhite='\e[1;97m'      # White

# High Intensty backgrounds
On_IBlack='\e[0;100m'   # Black
On_IRed='\e[0;101m'     # Red
On_IGreen='\e[0;102m'   # Green
On_IYellow='\e[0;103m'  # Yellow
On_IBlue='\e[0;104m'    # Blue
On_IPurple='\e[10;95m'  # Purple
On_ICyan='\e[0;106m'    # Cyan
On_IWhite='\e[0;107m'   # White


# Configure terminal colors (yellow theme)
#ctime=$BYellow # time when command was executed
#cbracket=$BPurple # [ and ]
#cdog=$BGreen # @ char
#chost=$BYellow # PC name
#cpath=$BYellow # file path = `pwd`
#ccursor=$BWhite # > char marking a command line
#cbranch=$BCyan # git branch
#cstatus=$IRed # command smile and error code
#carrow=$IGreen # separator for smile between error code
#croot=$URed # root username color
#cuser=$BYellow # normal username color

# Configure terminal colors (blue theme)
ctime=$BCyan # time when command was executed
cbracket=$BPurple # [ and ]
cdog=$BYellow # @ char
chost=$BCyan # PC name
cpath=$BCyan # file path = `pwd`
ccursor=$BWhite # > char marking a command line
cbranch=$BGreen # git branch
cstatus=$IRed # command smile and error code
carrow=$IGreen # separator for smile between error code
croot=$URed # root username color
cuser=$BCyan # normal username color

username=`eval whoami`
if [ "$username" == "root" ];then
  usercolor=$croot
else
  usercolor=$cuser
fi

function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

# Colors the terminal in a nice way and shows git branch in a prompt all the time
function branch {
  a=`parse_git_branch`
  if [ -n "$a" ]; then
    echo -e "$cbracket[$cbranch$a$cbracket]"
  else
    echo ""
  fi
}

# Show surprise smile if command returned error exit code
function surprise {
  status=$?
  if [ $status != 0 ]; then
    echo -e "$cstatus O_O $carrow->$cstatus $status \n$Color_Off"
  else
    echo ""
  fi
}

PS1="\$(surprise)\
\[$cbracket\][\[$ctime\]\$(date +%H:%M)\[$cbracket\]]\
\[$cbracket\][\[$usercolor\]\u$Color_Off\[$cdog\]@\[$chost\]\h\[$cbracket\]][\[$cpath\]\w\[$cbracket\]]\
\$(branch)\
\n\
\[$ccursor\] > \[$Color_Off\]"
PS2='> '
PS4='+ '

# Loader
########

# Add home bin directory if it exists to the path
DIR=$HOME/bin
if [ -d "$DIR" ]; then
    export PATH=$PATH:$DIR
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# Environment variables' definitons
if [ -f ~/.bash_env ]; then
    . ~/.bash_env
fi

# Bash cridentials
if [ -f ~/.bash_cridentials ]; then
    . ~/.bash_cridentials
fi

# ls command colorization
if [ -f ~/.dir_colors ]; then
    eval "`dircolors -b ~/.dir_colors`"
fi
