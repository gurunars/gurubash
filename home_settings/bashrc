# Exiter
########

# If not running interactively, don't do anything
[ -z "$PS1" ] && return


# Loaders
#########

# Add home bin directory if it exists to the path
DIR=$HOME/bin
if [ -d "$DIR" ]; then
    export PATH=$PATH:$DIR
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# Environment variables' definitons
if [ -f ~/.bash_env ]; then
    . ~/.bash_env
fi

# Bash cridentials
if [ -f ~/.bash_cridentials ]; then
    . ~/.bash_cridentials
fi

# ls command colorization
if [ -f ~/.dir_colors ]; then
    eval "`dircolors -b ~/.dir_colors`"
fi

# Load status face
if [ -f ~/.bash_statusface ]; then
    . ~/.bash_statusface
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# Load color definitions
if [ -f ~/.bash_color_definitions ]; then
    . ~/.bash_color_definitions
fi

# Load the theme
if [ -f ~/.bash_theme.$BASH_THEME ]; then
    . ~/.bash_theme.$BASH_THEME
fi


# Settings
##########

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# Make bash autocomplete with up arrow from bash history
bind '"\e[A":history-search-backward'
bind '"\e[B":history-search-forward'

username=`eval whoami`
if [ "$username" == "root" ];then
  usercolor=$croot
else
  usercolor=$cuser
fi

function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

# Colors the terminal in a nice way and shows git branch in a prompt all the time
function branch {
  a=`parse_git_branch`
  if [ -n "$a" ]; then
    echo -e "$cbracket[$cbranch$a$cbracket]"
  else
    echo ""
  fi
}

# Show surprise smile if command returned error exit code
function surprise {
  status=$?
  if [ $status != 0 ]; then
    echo -e "$cstatus $statusface $carrow$statusarrow$cstatus $status \n$Color_Off"
  else
    echo ""
  fi
}

PS1="\$(surprise)\
\[$cbracket\][\[$ctime\]\$(date +%H:%M)\[$cbracket\]]\
\[$cbracket\][\[$usercolor\]\u$Color_Off\[$cdog\]@\[$chost\]\h\[$cbracket\]][\[$cpath\]\w\[$cbracket\]]\
\$(branch)\
\n\
\[$ccursor\] > \[$Color_Off\]"
PS2='> '
PS4='+ '
