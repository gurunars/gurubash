#!/bin/bash

set -e

function assume_with_csv_args {
  AWS_CREDS_CSV_FILE=$1

  export AWS_ACCESS_KEY_ID=$(cat ${AWS_CREDS_CSV_FILE} | sed -n 2p | cut -d, -f1)
  export AWS_SECRET_ACCESS_KEY=$(cat ${AWS_CREDS_CSV_FILE} | sed -n 2p | cut -d, -f2)
  export AWS_SESSION_TOKEN=$(cat ${AWS_CREDS_CSV_FILE} | sed -n 2p | cut -d, -f3)
  export AWS_ASSUMED_ROLE=${AWS_CREDS_CSV_FILE}

  /bin/bash
}

function assume_with_cli_args {
  AWS_ACCOUNT=$1
  AWS_ROLE=$2

  if [ -z "${AWS_ACCOUNT}" ]; then
    echo "No AWS_ACCOUNT (1)"
    echo "assume-role ACCOUNT_ID ROLE_NAME"
    exit 1
  fi

  if [ -z "${AWS_ROLE}" ]; then
    echo "No AWS_ROLE (2)"
    echo "assume-role ACCOUNT_ID ROLE_NAME"
    exit 1
  fi

  # Clear out existing AWS session environment, or the awscli call will fail
  unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN

  KST=$(
    aws sts assume-role \
      --role-arn arn:aws:iam::${AWS_ACCOUNT}:role/${AWS_ROLE} \
      --role-session-name Personal-assumed-${USER}-role \
      --query '[Credentials.AccessKeyId,Credentials.SecretAccessKey,Credentials.SessionToken]' \
      --output text
  )

  args=($KST)

  export AWS_ACCESS_KEY_ID=${args[0]}
  export AWS_SECRET_ACCESS_KEY=${args[1]}
  export AWS_SESSION_TOKEN=${args[2]}
  export AWS_ASSUMED_ROLE="${AWS_ACCOUNT}/${AWS_ROLE}"

  /bin/bash
}

if [ "$#" -eq 1 ]; then
  assume_with_csv_args
elif [ "$#" -eq 2 ]; then
  assume_with_cli_args
else
  echo "Use either:"
  echo "assume-role CREDS_CSV_FILE"
  echo "OR:"
  echo "assume-role ACCOUNT_ID ROLE_NAME"
fi